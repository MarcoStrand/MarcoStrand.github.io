<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MarcoStrand&#39;s Blog</title>
  
  
  <link href="http://localhost:4000/atom.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2023-02-11T13:32:13.688Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>Liu Hanzhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript学习笔记——PC端网页特效</title>
    <link href="http://localhost:4000/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/"/>
    <id>http://localhost:4000/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</id>
    <published>2023-02-11T13:30:00.000Z</published>
    <updated>2023-02-11T13:32:13.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PC端网页特效"><a href="#PC端网页特效" class="headerlink" title="PC端网页特效"></a>PC端网页特效</h1><h2 id="1-offset元素偏移量"><a href="#1-offset元素偏移量" class="headerlink" title="1. offset元素偏移量"></a>1. offset元素偏移量</h2><p>offset翻译过来就是偏移量，我们使用offset相关属性可以<strong>动态</strong>地得到该元素的位置（偏移），大小等</p><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/image-20230207201119022.png" style="zoom:50%;"><p>注意：</p><ul><li>offsetTop&#x2F;Left是相对带有定位的父元素，如果父元素没有定位，则以body为准</li><li>parenNode返回的是亲父亲，不管父亲有没有定位，offsetParent返回的是有定位的父亲</li></ul><h3 id="offset与style区别"><a href="#offset与style区别" class="headerlink" title="offset与style区别"></a>offset与style区别</h3><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/image-20230207203130257.png" style="zoom:50%;"><h2 id="2-元素可视区client系列"><a href="#2-元素可视区client系列" class="headerlink" title="2. 元素可视区client系列"></a>2. 元素可视区client系列</h2><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/image-20230208163312749.png" style="zoom:50%;"><h3 id="flexible源码分析："><a href="#flexible源码分析：" class="headerlink" title="flexible源码分析："></a>flexible源码分析：</h3><p>立即执行函数：不需要调用，立马能够自己执行的函数，也可以传递参数进来</p><p>作用：独立创建一个作用域，里面所有的变量都是局部变量</p><p><code>(function() &#123;&#125;)();  或者 (function()&#123;&#125;());</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(形参)&#123; </span><br><span class="line">    函数体</span><br><span class="line">&#125;)(实参) //第二个括号可以看作调用函数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(形参)&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;(实参))</span><br></pre></td></tr></table></figure><h2 id="3-元素滚动scroll系列"><a href="#3-元素滚动scroll系列" class="headerlink" title="3. 元素滚动scroll系列"></a>3. 元素滚动scroll系列</h2><p>我们使用scroll系列的相关属性可以动态的得到该元素的大小，滚动距离等。scroll是元素实际内容的大小</p><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/image-20230208165716640.png" style="zoom:50%;"><p>scrollTop最常用</p><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/image-20230208170030922.png" style="zoom:50%;"><h3 id="页面被卷去的头部"><a href="#页面被卷去的头部" class="headerlink" title="页面被卷去的头部"></a>页面被卷去的头部</h3><p>如果浏览器的高或者宽度不足以显示整个页面时，会自动出现滚动条，当滚动条向下滚动，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部，滚动条在滚动时会触发onscroll事件</p><h2 id="4-三大系列总结"><a href="#4-三大系列总结" class="headerlink" title="4. 三大系列总结"></a>4. 三大系列总结</h2><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/image-20230208204346292.png" style="zoom:50%;"><p>主要用法:</p><ul><li>offset经常用户获取元素位置 offsetTop offSetLeft</li><li>client经常用户获取元素大小 clientWidth clientHeight</li><li>scroll经常用于获取滚动距离 scrollTop scrollLeft</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PC端网页特效&quot;&gt;&lt;a href=&quot;#PC端网页特效&quot; class=&quot;headerlink&quot; title=&quot;PC端网页特效&quot;&gt;&lt;/a&gt;PC端网页特效&lt;/h1&gt;&lt;h2 id=&quot;1-offset元素偏移量&quot;&gt;&lt;a href=&quot;#1-offset元素偏移量&quot; class</summary>
      
    
    
    
    <category term="offset元素偏移量" scheme="http://localhost:4000/categories/offset%E5%85%83%E7%B4%A0%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    
    
    <category term="Javascript学习笔记" scheme="http://localhost:4000/tags/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记——BOM</title>
    <link href="http://localhost:4000/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94BOM/"/>
    <id>http://localhost:4000/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94BOM/</id>
    <published>2023-02-11T13:25:19.000Z</published>
    <updated>2023-02-11T13:29:16.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="1-BOM概述"><a href="#1-BOM概述" class="headerlink" title="1.BOM概述"></a>1.BOM概述</h2><p><strong>浏览器对象模型</strong>，它提供了独立于内容而与浏览器窗口进行交互的对象</p><p>BOM由一系列相关的对象构成，每个对象提供了很多方法和属性</p><p><strong>BOM与DOM对比</strong></p><table><thead><tr><th align="center">DOM</th><th align="center">BOM</th></tr></thead><tbody><tr><td align="center">文档对象模型</td><td align="center">浏览器对象模型</td></tr><tr><td align="center">把【文档】当作一个【对象】来看待</td><td align="center">把【浏览器】当作一个【对象】来看待</td></tr><tr><td align="center">顶级对象是<strong>document</strong></td><td align="center">顶级对象是<strong>window</strong></td></tr><tr><td align="center">主要学习的是操作页面元素</td><td align="center">主要学习的是浏览器窗口交互的一些对象</td></tr><tr><td align="center">是W3C标准规范</td><td align="center">缺少标准</td></tr></tbody></table><p><strong>BOM的构成</strong></p><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94BOM/image-20230206224300053.png" style="zoom:50%;"><h2 id="2-window对象常见事件"><a href="#2-window对象常见事件" class="headerlink" title="2. window对象常见事件"></a>2. window对象常见事件</h2><h3 id="2-1-窗口加载事件"><a href="#2-1-窗口加载事件" class="headerlink" title="2.1 窗口加载事件"></a>2.1 窗口加载事件</h3><p><code>window.onload = function()&#123;&#125; 或者 window.addEventListener(&quot;load&quot;,function()&#123;&#125;);</code></p><p>window.onload等到所有页面内容加载完再加载事件，可以使得<script>放到任何位置</p><p>注意：</p><img src="JavaScript学习笔记——BOM/image-20230206224946189.png" style="zoom:50%;" /><p>load事件是等到页面全部元素加载完，DOMXContentLoaded事件是DOM加载完毕，不包含图片，css等就可以执行</p><h3 id="2-2-调整窗口大小事件"><a href="#2-2-调整窗口大小事件" class="headerlink" title="2.2 调整窗口大小事件"></a>2.2 调整窗口大小事件</h3><p><code>window.onresize = funcion()&#123;&#125;</code>   </p><p><code>window.addEventListener(&quot;resize&quot;,function()&#123;&#125;);</code></p><img src="JavaScript学习笔记——BOM/image-20230207105325002.png" style="zoom:50%;" /><h2 id="3-定时器"><a href="#3-定时器" class="headerlink" title="3.定时器"></a>3.定时器</h2><h3 id="3-1-setTimeout-定时器"><a href="#3-1-setTimeout-定时器" class="headerlink" title="3.1 setTimeout()定时器"></a>3.1 setTimeout()定时器</h3><p><code>window.setTimeout(调用函数, 延迟的毫秒数);</code></p><p>该方法用于设置一个定时器，该定时器在到时后执行调用函数</p><p>window在调用时可以省略</p><p>这个调用函数可以直接写函数，也可以写函数名。还有一种写法 <code>‘函数名()&#39;</code></p><p>页面中可能有很多的定时器，我们经常给定时器加标识符</p><p>setTimeout这个函数也称为<strong>回调函数</strong>,这个函数需要等待时间，时间到了才去调用这个函数，因此称为回调函数</p><h3 id="3-2-停止setTimeout-定时器"><a href="#3-2-停止setTimeout-定时器" class="headerlink" title="3.2 停止setTimeout()定时器"></a>3.2 停止setTimeout()定时器</h3><p><code>window.clearTimeOut(timeoutID)</code> </p><p>timeoutID就是定时器的名字</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button&gt;停止定时器&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var ad = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">    var btn = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">    var time = setTimeout(function () &#123;</span><br><span class="line">        ad.style.display = &quot;none&quot;;</span><br><span class="line">    &#125;, 5000);</span><br><span class="line">    btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">        clearTimeout(time);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-setInterval-定时器"><a href="#3-4-setInterval-定时器" class="headerlink" title="3.4 setInterval()定时器"></a>3.4 setInterval()定时器</h3><p><code>window.setInterval(回调函数,间隔毫秒数);</code></p><img src="JavaScript学习笔记——BOM/image-20230207114825195.png" style="zoom:50%;" /><h3 id="3-5-setInterval-定时器清除"><a href="#3-5-setInterval-定时器清除" class="headerlink" title="3.5 setInterval()定时器清除"></a>3.5 setInterval()定时器清除</h3><p><code>window.clearInterval(intervalID);</code></p><h4 id="案例——验证码发送"><a href="#案例——验证码发送" class="headerlink" title="案例——验证码发送"></a>案例——验证码发送</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; value=&quot;&quot;&gt;</span><br><span class="line">&lt;button&gt;发送&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var input = document.querySelector(&#x27;input&#x27;);</span><br><span class="line">    var btn = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">    var ul = document.querySelector(&#x27;ul&#x27;);</span><br><span class="line">    var nums = 60;</span><br><span class="line">    btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">        btn.disabled = true;</span><br><span class="line">        var li = document.createElement(&#x27;li&#x27;)</span><br><span class="line">        ul.appendChild(li);</span><br><span class="line">        li.innerHTML = input.value;</span><br><span class="line">        //下面是自己写的，和老师答案略有出入</span><br><span class="line">        var times = setInterval(function () &#123;</span><br><span class="line">            if (nums &gt;= 1) &#123;</span><br><span class="line">                nums = nums - 1;</span><br><span class="line">                btn.innerHTML = &#x27;请&#x27; + nums + &#x27;秒后再发送&#x27;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                clearInterval(times);</span><br><span class="line">                btn.disabled = false;</span><br><span class="line">                btn.innerHTML = &#x27;发送&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-6-this-指向问题"><a href="#3-6-this-指向问题" class="headerlink" title="3.6 this 指向问题"></a>3.6 this 指向问题</h3><ol><li><p>全局作用域下，this指向全局对象window</p></li><li><p>方法调用中谁用this指向谁</p></li><li><p>构造函数中，this指向构造函数的实例</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Fun()&#123;</span><br><span class="line">   console.log(this);   //指向的是fun实例对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-JS执行队列"><a href="#4-JS执行队列" class="headerlink" title="4. JS执行队列"></a>4. JS执行队列</h2><h3 id="4-1-JS是单线程"><a href="#4-1-JS是单线程" class="headerlink" title="4.1 JS是单线程"></a>4.1 JS是单线程</h3><img src="JavaScript学习笔记——BOM/image-20230207163131179.png" style="zoom:50%;" /><h3 id="4-2-同步和异步"><a href="#4-2-同步和异步" class="headerlink" title="4.2 同步和异步"></a>4.2 同步和异步</h3><p>同步：前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序一致。</p><p>异步：多任务，所线程。</p><img src="JavaScript学习笔记——BOM/image-20230207164628571.png" style="zoom:50%;" /><h3 id="4-3-执行机制"><a href="#4-3-执行机制" class="headerlink" title="4.3 执行机制"></a>4.3 执行机制</h3><img src="JavaScript学习笔记——BOM/image-20230207164644713.png" style="zoom:50%;" /><h2 id="5-location对象"><a href="#5-location对象" class="headerlink" title="5. location对象"></a>5. location对象</h2><h3 id="5-1-location对象属性"><a href="#5-1-location对象属性" class="headerlink" title="5.1 location对象属性"></a>5.1 location对象属性</h3><img src="JavaScript学习笔记——BOM/image-20230207171445461.png" style="zoom:50%;" /><h3 id="5-2-location对象的方法"><a href="#5-2-location对象的方法" class="headerlink" title="5.2 location对象的方法"></a>5.2 location对象的方法</h3><img src="JavaScript学习笔记——BOM/image-20230207195438487.png" style="zoom:50%;" /><p>注意：</p><ul><li>assign记录之前的网页，可以回退</li><li>replace不能回退</li></ul><h3 id="5-3-navigator对象"><a href="#5-3-navigator对象" class="headerlink" title="5.3 navigator对象"></a>5.3 navigator对象</h3><img src="JavaScript学习笔记——BOM/image-20230207200407650.png" style="zoom:50%;" /><h2 id="6-history对象"><a href="#6-history对象" class="headerlink" title="6. history对象"></a>6. history对象</h2><img src="JavaScript学习笔记——BOM/image-20230207200736774.png" style="zoom:50%;" /></script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BOM&quot;&gt;&lt;a href=&quot;#BOM&quot; class=&quot;headerlink&quot; title=&quot;BOM&quot;&gt;&lt;/a&gt;BOM&lt;/h1&gt;&lt;h2 id=&quot;1-BOM概述&quot;&gt;&lt;a href=&quot;#1-BOM概述&quot; class=&quot;headerlink&quot; title=&quot;1.BOM概述</summary>
      
    
    
    
    <category term="BOM" scheme="http://localhost:4000/categories/BOM/"/>
    
    
    <category term="Javascript学习笔记" scheme="http://localhost:4000/tags/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记——DOM事件高级</title>
    <link href="http://localhost:4000/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/"/>
    <id>http://localhost:4000/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/</id>
    <published>2023-02-11T13:20:03.000Z</published>
    <updated>2023-02-11T13:44:36.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h2><h3 id="1-注册事件（绑定事件）"><a href="#1-注册事件（绑定事件）" class="headerlink" title="1. 注册事件（绑定事件）"></a>1. 注册事件（绑定事件）</h3><p>传统注册方式和方法监听注册方式</p><p>传统注册方式</p><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/image-20230206104219280.png" style="zoom:50%;"><p>方法监听注册方式</p><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/image-20230206104357965.png" style="zoom:50%;"><h4 id="addEventListener-事件监听方式"><a href="#addEventListener-事件监听方式" class="headerlink" title="addEventListener 事件监听方式"></a>addEventListener 事件监听方式</h4><p><code>eventTarget.addEventListener(type, Listener[, useCapture])</code></p><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/image-20230206104615410.png" style="zoom:50%;"><h3 id="2-删除事件（解绑事件）"><a href="#2-删除事件（解绑事件）" class="headerlink" title="2. 删除事件（解绑事件）"></a>2. 删除事件（解绑事件）</h3><p>传统方式删除事件</p><p><code>evetTarget.onclick = null;</code></p><p>方法监听注册方式删除事件</p><p><code>eventTarget.removeEventListener(type,listener[, useCapture]);</code></p><p><code>eventTarget.detachEvent(eventNameWithOn,callback);</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;1&lt;/div&gt;</span><br><span class="line">&lt;div&gt;2&lt;/div&gt;</span><br><span class="line">&lt;div&gt;3&lt;/div&gt;</span><br><span class="line">       //传统删除方法</span><br><span class="line">       var divs = document.querySelectorAll(&#x27;div&#x27;);</span><br><span class="line">       divs[0].onclick = function () &#123;</span><br><span class="line">           alert(&#x27;123&#x27;);</span><br><span class="line">           divs[0].onclick = null; //删除事件</span><br><span class="line">       &#125;</span><br><span class="line">       //方法监听注册方式</span><br><span class="line">       divs[1].addEventListener(&#x27;click&#x27;, fn)  //使用方法监听注册方式，不可以使用匿名函数，需要把响应器写在外面，而且不需要调用，直接把函数名写在里面</span><br><span class="line">       function fn() &#123;</span><br><span class="line">           alert(&#x27;456&#x27;);</span><br><span class="line">           divs[1].removeEventListener(&#x27;click&#x27;, fn);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="3-DOM事件流"><a href="#3-DOM事件流" class="headerlink" title="3. DOM事件流"></a>3. DOM事件流</h3><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/image-20230206114004135.png" style="zoom:50%;"><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/image-20230206114159900.png" style="zoom:50%;"><p>注意：</p><ul><li><p>JS代码只能执行捕获或者冒泡其中一个阶段</p></li><li><p>onclick和attachEvent只能得到冒泡阶段</p></li><li><p>如果<code>eventTarget.addEventListener(type, Listener[, useCapture])</code>的第三个参数是 true，则处于捕获阶段</p></li></ul><p>​        如果<code>eventTarget.addEventListener(type, Listener[, useCapture])</code>的第三个参数是false，则处于冒泡阶段</p><ul><li>很少使用事件捕获</li><li>onblur,onfocus,onmouseenter,onmouseleave事件没有冒泡</li></ul><h3 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4.  事件对象"></a>4.  事件对象</h3><ol><li><p>event事件对象写在侦听函数的括号里，当形参看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var div = document.querySelector(&#x27;div&#x27;)</span><br><span class="line">div.onclick=function(event)&#123;</span><br><span class="line">console.log(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</strong></p></li><li><p>事件对象是我们事件的一系列相关数据的集合，跟事件相关的，比如鼠标点击里面包含了鼠标的相关信息，比如坐标等</p></li><li><p>这个事件对象我们可以自己命名，比如evt e   </p></li><li><p>兼容性：添加 e &#x3D; e || window.event</p></li><li><p><strong>注意事件对象与事件的区别</strong>：当事件的响应函数被触发时，会产生一个事件对象<code>event</code>。浏览器每次都会将这个事件<code>event</code>作为实参传进之前的响应函数。事件是我们进行的操作，比如点击鼠标，按下键盘等。</p></li></ol><h4 id="常见的属性和方法："><a href="#常见的属性和方法：" class="headerlink" title="常见的属性和方法："></a>常见的属性和方法：</h4><ol><li><p>e.target和this的区别：</p><p>e.target返回点击的元素，如果点击了ul里面的li，则返回li</p><p>this返回绑定事件的对象（元素），如果点击了ul里面的li，则返回ul</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;123&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var ul = document.querySelector(&#x27;ul&#x27;);</span><br><span class="line">    ul.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">        console.log(e.target);  </span><br><span class="line">    &#125;)</span><br><span class="line">    var div = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">    div.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>跟this有一个相似的属性，currentTarget</li></ul><ol start="2"><li><p>阻止默认行为的三种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;123&lt;/div&gt;</span><br><span class="line">   &lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</span><br><span class="line">   &lt;form action=&quot;http://www.baidu.com&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;submit&quot; value=&quot;提交&quot; name=&quot;sub&quot;&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       var div = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">       div.addEventListener(&#x27;click&#x27;, fn);</span><br><span class="line">       function fn(e) &#123;</span><br><span class="line">           console.log(e.type);</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       //阻止默认行为 让链接不跳转，或者让提交按钮不提交</span><br><span class="line">       var a = document.querySelector(&#x27;a&#x27;);</span><br><span class="line">       a.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">           e.preventDefault(); //DOM标准写法，适用于普通浏览器</span><br><span class="line">           e.returnValue;  //适用于低版本浏览器</span><br><span class="line">           return false;  //也能阻止默认行为，特点就是return后面的代码不执行了，而且只限于传统的注册方式</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-阻止事件冒泡"><a href="#5-阻止事件冒泡" class="headerlink" title="5.  阻止事件冒泡"></a>5.  阻止事件冒泡</h3><h4 id="阻止事件冒泡的两种方式"><a href="#阻止事件冒泡的两种方式" class="headerlink" title="阻止事件冒泡的两种方式"></a>阻止事件冒泡的两种方式</h4><p>标准写法：利用事件对象里面的stopPropagation()方法</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;demo1&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var son = document.querySelector(&#x27;.demo2&#x27;);</span><br><span class="line">    son.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">        alert(&#x27;son&#x27;);</span><br><span class="line">        e.stopPropagation(); //stop停止，不再弹出&#x27;father&#x27;</span><br><span class="line">        e.cancelBubble = true;//低版本使用</span><br><span class="line">    &#125;, false)</span><br><span class="line">    var father = document.querySelector(&#x27;.demo1&#x27;);</span><br><span class="line">    father.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">        alert(&#x27;father&#x27;);</span><br><span class="line"></span><br><span class="line">    &#125;, false);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="6-事件委托"><a href="#6-事件委托" class="headerlink" title="6.  事件委托"></a>6.  事件委托</h3><p>事件委托：也称为事件代理</p><p>事件委托的原理：</p><p>不是给每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理，当对子节点执行操作，会触发父节点的事件</p><p>例如：给ul注册事件，然后利用事件对象的target来找到当前点击的li，因为点击li,事件会冒泡到ul上，ul有注册事件，就会触发事件监听器</p><p>事件委托的作用：</p><p>只操作了一次DOM</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">        &lt;li&gt;halo&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;halo&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;halo&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;halo&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;halo&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var ul = document.querySelector(&#x27;ul&#x27;);</span><br><span class="line">        ul.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">            e.target.style.backgroundColor = &#x27;orange&#x27;; //获取父元素，当点击父元素，背景颜色变化，冒泡影响子元素</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="7-常用的鼠标事件"><a href="#7-常用的鼠标事件" class="headerlink" title="7.  常用的鼠标事件"></a>7.  常用的鼠标事件</h3><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/image-20230206161249732.png" style="zoom:50%;"><ol><li><p>禁止鼠标右键菜单</p><p>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        document.addEventListener(&#x27;contextmenu&#x27;, function (e) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>禁止鼠标选中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&#x27;selectstart&#x27;, function (e) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>鼠标事件对象</li></ol><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/image-20230206165803079.png" style="zoom:50%;"><p>注意：</p><ul><li>可视区指的是相对于当前导航栏和窗口边缘，即使有滚动条，仍然以导航栏和窗口边缘为准</li><li>页面文档指的是整个页面</li></ul><h3 id="8-常用的键盘事件"><a href="#8-常用的键盘事件" class="headerlink" title="8.  常用的键盘事件"></a>8.  常用的键盘事件</h3><img src="/2023/02/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94DOM%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/image-20230206193223796.png" style="zoom:50%;"><p>注意：</p><ul><li><p>如果使用addEventListener不需要加on</p></li><li><p>执行顺序：keydown-&gt;keypress-&gt;keyup</p></li></ul><p><strong>键盘事件对象</strong></p><ol><li>keycode属性可以得到相应键的ASCⅡ码值。keyup和keydown不区分大小写，而keypress区分大小写</li><li>实际开发中，更多实用keydown和keyup,它能识别所有的键</li></ol><h4 id="——实例京东按键输入"><a href="#——实例京东按键输入" class="headerlink" title="——实例京东按键输入"></a>——实例京东按键输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var search = document.querySelector(&#x27;input&#x27;);</span><br><span class="line">    document.addEventListener(&#x27;keyup&#x27;, function (e) &#123; //使用keyup，按下s键就不会把S输入到文本框</span><br><span class="line">        // console.log(e.keyCode);</span><br><span class="line">        if (e.keyCode == 83) &#123;</span><br><span class="line">            search.focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件高级&quot;&gt;&lt;a href=&quot;#事件高级&quot; class=&quot;headerlink&quot; title=&quot;事件高级&quot;&gt;&lt;/a&gt;事件高级&lt;/h2&gt;&lt;h3 id=&quot;1-注册事件（绑定事件）&quot;&gt;&lt;a href=&quot;#1-注册事件（绑定事件）&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="JavaScirpt" scheme="http://localhost:4000/categories/JavaScirpt/"/>
    
    
    <category term="JavaScript学习笔记" scheme="http://localhost:4000/tags/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>错误记录——京东放大镜</title>
    <link href="http://localhost:4000/2023/02/08/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BA%AC%E4%B8%9C%E6%94%BE%E5%A4%A7%E9%95%9C/"/>
    <id>http://localhost:4000/2023/02/08/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BA%AC%E4%B8%9C%E6%94%BE%E5%A4%A7%E9%95%9C/</id>
    <published>2023-02-08T07:06:06.000Z</published>
    <updated>2023-02-08T07:47:00.601Z</updated>
    
    <content type="html"><![CDATA[<p>在完成京东放大器练习的时候，为了使鼠标在图片盒子左上角的定位为（0，0）从而使得遮罩放大能够在图片内跟随鼠标移动的时候，方便计算其坐标</p><p>老师的思路：</p><p>HTML:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;preview_img&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;upload/s3.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;big&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;upload/big.jpg&quot; alt=&quot;&quot; class=&quot;bigImg&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.preview_img &#123;</span><br><span class="line">    position: relative; //将图片设置为父元素</span><br><span class="line">    height: 398px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mask &#123;</span><br><span class="line">    display: none;</span><br><span class="line">    position: absolute;  //将遮罩设置为子元素</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background: #FEDE4F;</span><br><span class="line">    opacity: .5;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    cursor: move;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标在图片内的坐标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var preview_img = document.querySelector(&#x27;.preview_img&#x27;);</span><br><span class="line">var mask = document.querySelector(&#x27;.mask&#x27;);</span><br><span class="line">var big = document.querySelector(&#x27;.big&#x27;);</span><br><span class="line">// 1. 当我们鼠标经过 preview_img 就显示和隐藏 mask 遮挡层 和 big 大盒子</span><br><span class="line">preview_img.addEventListener(&#x27;mouseover&#x27;, function() &#123;</span><br><span class="line">    mask.style.display = &#x27;block&#x27;;</span><br><span class="line">    big.style.display = &#x27;block&#x27;;</span><br><span class="line">&#125;)</span><br><span class="line">preview_img.addEventListener(&#x27;mouseout&#x27;, function() &#123;</span><br><span class="line">        mask.style.display = &#x27;none&#x27;;</span><br><span class="line">        big.style.display = &#x27;none&#x27;;</span><br><span class="line">    &#125;)</span><br><span class="line">    // 2. 鼠标移动的时候，让黄色的盒子跟着鼠标来走</span><br><span class="line">preview_img.addEventListener(&#x27;mousemove&#x27;, function(e) &#123;</span><br><span class="line">    // (1). 先计算出鼠标在盒子内的坐标</span><br><span class="line">    var x = e.pageX - this.offsetLeft;</span><br><span class="line">    var y = e.pageY - this.offsetTop;</span><br><span class="line">    // console.log(x, y);</span><br><span class="line">    // (2) 减去盒子高度 300的一半 是 150 就是我们mask 的最终 left 和top值了</span><br><span class="line">    // (3) 我们mask 移动的距离</span><br><span class="line">    var maskX = x - mask.offsetWidth / 2;</span><br><span class="line">    var maskY = y - mask.offsetHeight / 2;</span><br><span class="line">    // (4) 如果x 坐标小于了0 就让他停在0 的位置</span><br><span class="line">    // 遮挡层的最大移动距离</span><br><span class="line">    var maskMax = preview_img.offsetWidth - mask.offsetWidth;</span><br><span class="line">    if (maskX &lt;= 0) &#123;</span><br><span class="line">        maskX = 0;</span><br><span class="line">    &#125; else if (maskX &gt;= maskMax) &#123;</span><br><span class="line">        maskX = maskMax;</span><br><span class="line">    &#125;</span><br><span class="line">    if (maskY &lt;= 0) &#123;</span><br><span class="line">        maskY = 0;</span><br><span class="line">    &#125; else if (maskY &gt;= maskMax) &#123;</span><br><span class="line">        maskY = maskMax;</span><br><span class="line">    &#125;</span><br><span class="line">    mask.style.left = maskX + &#x27;px&#x27;;</span><br><span class="line">    mask.style.top = maskY + &#x27;px&#x27;;</span><br></pre></td></tr></table></figure><p>这里注意到，老师利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x = e.pageX - this.offsetLeft;  //this = preview_img</span><br><span class="line">var y = e.pageY - this.offsetTop;</span><br></pre></td></tr></table></figure><p>将鼠标移动至图片左上角的坐标变成了（0，0），原理是鼠标在浏览器可视区域的坐标减去图片相对于父元素（body)的偏移量从而得到鼠标在盒子内的坐标。</p><p>我在练习的时候，为了能更加深刻理解这个案例的原理，将box作为图片和遮罩层的父盒子，将body作为box的父元素</p><p><img src="/2023/02/08/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BA%AC%E4%B8%9C%E6%94%BE%E5%A4%A7%E9%95%9C/%E4%BA%AC%E4%B8%9C%E6%94%BE%E5%A4%A7%E9%95%9C1.png"></p><p>此时，为了实现获得鼠标在盒子内的坐标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x = e.pageX - box.offsetLeft - img.offsetLeft;</span><br><span class="line">var y = e.pageY - box.offsetTop - img.offsetTop;</span><br></pre></td></tr></table></figure><p>这里要注意到offset偏移量的概念：</p><img src="/2023/02/08/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BA%AC%E4%B8%9C%E6%94%BE%E5%A4%A7%E9%95%9C/offset.png" style="zoom:67%;"><p>offsetTop是距离最近的一个具有定位的父元素的顶部的距离，若父元素没有，则向上寻找具有定位的祖宗元素，若都没有，则以body为准。</p><p>修改后js:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var box = document.querySelector(&#x27;.box&#x27;);</span><br><span class="line">  var img = document.querySelector(&#x27;.preview_img&#x27;);</span><br><span class="line">  var mask = document.querySelector(&#x27;.mask&#x27;);</span><br><span class="line">  var big = document.querySelector(&#x27;.big&#x27;);</span><br><span class="line">  img.addEventListener(&#x27;mouseover&#x27;, function () &#123;</span><br><span class="line">      mask.style.display = &#x27;block&#x27;;</span><br><span class="line">      big.style.display = &#x27;block&#x27;;</span><br><span class="line">  &#125;)</span><br><span class="line">  img.addEventListener(&#x27;mousemove&#x27;, function (e) &#123;</span><br><span class="line">      // (1). 先计算出鼠标在盒子内的坐标</span><br><span class="line">      var x = e.pageX - box.offsetLeft - img.offsetLeft;</span><br><span class="line">      var y = e.pageY - box.offsetTop - img.offsetTop;</span><br><span class="line">      // console.log(img.offsetParent, mask.offsetParent); //都是box</span><br><span class="line">      //console.log(x + &#x27;,&#x27; + y); //返回的是box父元素相对于body的偏移</span><br><span class="line">      // (2) 减去盒子高度 300的一半 是 150 就是我们mask 的最终 left 和top值了</span><br><span class="line">      // (3) 我们mask 移动的距离</span><br><span class="line">      var maskX = x - mask.offsetWidth / 2;</span><br><span class="line">      var maskY = y - mask.offsetHeight / 2;</span><br><span class="line">      // (4) 如果x 坐标小于了0 就让他停在0 的位置</span><br><span class="line">      // 遮挡层的最大移动距离</span><br><span class="line">      var maskMax = img.offsetWidth - mask.offsetWidth;</span><br><span class="line">      if (maskX &lt;= 0) &#123;</span><br><span class="line">          maskX = 0;</span><br><span class="line">      &#125; else if (maskX &gt;= maskMax) &#123;</span><br><span class="line">          maskX = maskMax;</span><br><span class="line">      &#125;</span><br><span class="line">      if (maskY &lt;= 0) &#123;</span><br><span class="line">          maskY = 0;</span><br><span class="line">      &#125; else if (maskY &gt;= maskMax) &#123;</span><br><span class="line">          maskY = maskMax;</span><br><span class="line">      &#125;</span><br><span class="line">      mask.style.left = maskX + img.offsetLeft + &#x27;px&#x27;;</span><br><span class="line">      mask.style.top = maskY + img.offsetTop + &#x27;px&#x27;;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在完成京东放大器练习的时候，为了使鼠标在图片盒子左上角的定位为（0，0）从而使得遮罩放大能够在图片内跟随鼠标移动的时候，方便计算其坐标&lt;/p&gt;
&lt;p&gt;老师的思路：&lt;/p&gt;
&lt;p&gt;HTML:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="offset元素偏移量" scheme="http://localhost:4000/categories/offset%E5%85%83%E7%B4%A0%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    
    
    <category term="JavaScript学习笔记" scheme="http://localhost:4000/tags/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="错误记录" scheme="http://localhost:4000/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>DOM学习笔记——排他思想</title>
    <link href="http://localhost:4000/2023/02/05/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3/"/>
    <id>http://localhost:4000/2023/02/05/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3/</id>
    <published>2023-02-05T01:51:02.000Z</published>
    <updated>2023-02-05T02:44:19.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实例1：按钮元素"><a href="#实例1：按钮元素" class="headerlink" title="实例1：按钮元素"></a>实例1：按钮元素</h2><p>应用场景：轮播图图片选择</p><p>效果：当点击按钮时，仅仅触发被点击按钮的效果，而其他按钮不变化。</p><img src="/2023/02/05/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3/image-20230205095508934.png" style="zoom:80%;"><p>实现方法:利用for循环内嵌套事件</p><pre><code>&lt;button&gt;按钮一&lt;/button&gt;&lt;button&gt;按钮二&lt;/button&gt;&lt;button&gt;按钮三&lt;/button&gt;&lt;button&gt;按钮四&lt;/button&gt;&lt;button&gt;按钮五&lt;/button&gt;&lt;script&gt;    //获取所有按钮元素    var btn = document.getElementsByTagName(&#39;button&#39;);    //btns得到的是伪数组 里面的每一个元素btn[i]    for (var i = 0; i &lt; btn.length; i++) &#123;        btn[i].onclick = function () &#123;            //先把所有背景颜色去掉            for (var i = 0; i &lt; btn.length; i++) &#123;                btn[i].style.backgroundColor = &#39;&#39;;            &#125;            //然后让当前元素背景颜色为pink            this.style.backgroundColor = &#39;pink&#39;;        &#125;    &#125;&lt;/script&gt;</code></pre><h2 id="实例2：首页换肤"><a href="#实例2：首页换肤" class="headerlink" title="实例2：首页换肤"></a>实例2：首页换肤</h2><p>应用场景：更换页面的背景图片</p><p>效果：当点击按钮时，将背景图片更换为选择的那一个</p><img src="/2023/02/05/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3/image-20230205095753468.png" style="zoom:80%;"><p>要点：当需要选择嵌套在一个类里面的标签时，可以使用<code>document.querySelector().querySelector(标签名);</code>进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            background: url(images/1.jpg) no-repeat center top;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .baidu &#123;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            width: 410px;</span><br><span class="line">            padding-top: 3px;</span><br><span class="line">            background-color: #fff;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .baidu li &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            margin: 0 1px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .baidu img &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul class=&quot;baidu&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&#x27;images/1.jpg&#x27;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&#x27;images/2.jpg&#x27;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&#x27;images/3.jpg&#x27;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&#x27;images/4.jpg&#x27;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var imgs = document.querySelector(&#x27;.baidu&#x27;).querySelectorAll(&#x27;img&#x27;);  //获取baidu类里面所有的li</span><br><span class="line">        for (var i = 0; i &lt; imgs.length; i++) &#123;</span><br><span class="line">            imgs[i].onclick = function () &#123;</span><br><span class="line">                document.body.style.backgroundImage = &#x27;url(&#x27; + this.src + &#x27;)&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="实例3：表格隔行变色"><a href="#实例3：表格隔行变色" class="headerlink" title="实例3：表格隔行变色"></a>实例3：表格隔行变色</h2><p>效果：实现用户将鼠标移动到某行上时，该行变色，实现元素突出显示的效果</p><p>要点:</p><ul><li>由于表头元素不应变色，故将表头与内容部分分别用thead和tbody标签，实现样式的分离</li><li>鼠标覆盖事件 onmouseover  鼠标移开 onmouseout</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class=&quot;tab&quot;&gt;</span><br><span class="line">     &lt;thead&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;代码&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;名称&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;最新公布净值&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;累计净值&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;前单位净值&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">     &lt;/thead&gt;</span><br><span class="line">     &lt;tbody&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;003526&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;农银金穗&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;1.075&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;1.079&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;1.074&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;003929&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;示例&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;1.034&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;1.088&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;1.034&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">     &lt;/tbody&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         var trs = document.querySelector(&#x27;tbody&#x27;).querySelectorAll(&#x27;tr&#x27;);</span><br><span class="line">         for (var i = 0; i &lt; trs.length; i++) &#123;</span><br><span class="line">             trs[i].onmouseover = function () &#123;</span><br><span class="line">                 this.className = &#x27;newtrs&#x27;;</span><br><span class="line">             &#125;</span><br><span class="line">             trs[i].onmouseout = function () &#123;</span><br><span class="line">                 this.className = &#x27;&#x27;;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="实例4：表单全选"><a href="#实例4：表单全选" class="headerlink" title="实例4：表单全选"></a>实例4：表单全选</h2><p>效果：实现了表单内容的全选，以及单选内容全选之后，全选按钮自动勾选的效果</p><p>实现思路：</p><ol><li>利用<code>this.checked(属性为true/false)</code>获取全选按钮的状态,若全选（true）&#x2F;取消全选（false），则利用for循环遍历单选按钮，利用<code>j_tbs[i]checked = this.checked</code>.修改每一个单选按钮的状态</li><li>利用flag检测单选按钮选择情况，有一个未选择，flag&#x3D;false</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;checkbox&quot; id=&quot;ckd_all&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;商品&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;价钱&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody id=&quot;j_tb&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;iPhone 8&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;8000&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;iPad pro&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;9000&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;iPad Air&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;5000&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;Apple Watch&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;3000&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var ckd_all = document.getElementById(&#x27;ckd_all&#x27;);//全选按钮</span><br><span class="line">    var j_tbs = document.getElementById(&#x27;j_tb&#x27;); //下面所有的复选框</span><br><span class="line">    ckd_all.onclick = function () &#123;</span><br><span class="line">        //this.checked可以得到当前复选框的选中状态，true就是选中，false就是未选中</span><br><span class="line">        for (var i = 0; i &lt; j_tbs.length; i++) &#123;</span><br><span class="line">            j_tbs[i].checked = this.checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (var i = 0; i &lt; j_tbs.length; i++) &#123;</span><br><span class="line">        j_tbs[i].onclick = function () &#123;</span><br><span class="line">            //flag控制全选按钮是否选中</span><br><span class="line">            var flag = true;</span><br><span class="line">            //每次点击，复选框都要检查四个小按钮是否全选中</span><br><span class="line">            for (var i = 0; i &lt; j_tbs.length; i++) &#123;</span><br><span class="line">                if (!j_tbs[i].checked) &#123;</span><br><span class="line">                    flag = false;  //只要有一个没选中，flag就是false</span><br><span class="line">                    break; //退出for循环，提高执行效率</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ckd_all.checked = flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实例1：按钮元素&quot;&gt;&lt;a href=&quot;#实例1：按钮元素&quot; class=&quot;headerlink&quot; title=&quot;实例1：按钮元素&quot;&gt;&lt;/a&gt;实例1：按钮元素&lt;/h2&gt;&lt;p&gt;应用场景：轮播图图片选择&lt;/p&gt;
&lt;p&gt;效果：当点击按钮时，仅仅触发被点击按钮的效果，而其他</summary>
      
    
    
    
    <category term="排他思想" scheme="http://localhost:4000/categories/%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="DOM" scheme="http://localhost:4000/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>DOM学习笔记——事件基础</title>
    <link href="http://localhost:4000/2023/02/03/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://localhost:4000/2023/02/03/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80/</id>
    <published>2023-02-03T15:08:50.000Z</published>
    <updated>2023-02-05T01:51:57.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><p>如何获取页面元素：</p><ul><li>根据ID获取</li><li>根据标签名获取</li><li>通过HTML5新增的方法获取</li><li>特殊元素获取</li></ul><h3 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h3><p>getElementById()方法可以获取带有ID的对象</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&#x27;time&#x27;&gt;2023-1-1&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">     var timer = document.getElementTypeId(&#x27;time&#x27;);</span><br><span class="line">     console.log(typeof timer);</span><br><span class="line">     console.dir(timer);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>因为页面从上往下加载，所以先得有标签，所以script写到标签的下面</li><li>括号里需要写参数，这个参数对大小写很敏感</li><li>返回的是一个元素对象</li><li>console.dir();可以打印返回的元素对象，查看里面的属性和方法</li></ul><h3 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h3><p>getElementsByTagName()方法可以返回带有指定标签名对象的集合</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;hello&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;hello&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;hello&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;hello&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;hello&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var lis = document.getElementsByTagName(&#x27;li&#x27;); //document意为从整个文档获取</span><br><span class="line">    console.log(lis);</span><br><span class="line">    console.log((lis[0])); //返回的是获取过来元素对象的集合，以伪数组的形式存储</span><br></pre></td></tr></table></figure><ul><li><p>依次打印里面的元素可以使用遍历的方法</p></li><li><p>如果页面中只有一个li标签，返回的仍然是伪数组的形式</p></li><li><p>返回的是获取过来元素对象的集合，以伪数组的形式存储</p></li><li><p>如果页面中没有这个元素，返回的是空的伪数组</p></li><li><p><strong>还可以获取某个元素（父元素）内部所有指定标签名的子元素</strong></p></li></ul><p>​        <code>element.getElementTypeName(&#39;标签名&#39;);</code></p><h3 id="H5新增元素获取方式"><a href="#H5新增元素获取方式" class="headerlink" title="H5新增元素获取方式"></a>H5新增元素获取方式</h3><p><code>document.getElementByClassName();    //根据类名返回元素对象集合</code></p><p><code>document.querySelector(&#39;选择器&#39;);   //根据指定选择器返回第一个元素对象，可以是类，id, 标签，类和ID需要加符号</code></p><p><code>document.querySelectorAll(&#39;选择器&#39;);   //返回指定选择器的所有对象</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;你好&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;你好。&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;demo&quot;&gt;示例示例&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var firstBox = document.querySelector(&#x27;.box&#x27;); //选择了一个类选择器</span><br><span class="line">    console.log(firstBox);</span><br><span class="line"></span><br><span class="line">    var demo1 = document.querySelector(&#x27;#demo&#x27;);  //选择了一个ID选择器</span><br><span class="line">    console.log(demo1);</span><br><span class="line">    </span><br><span class="line">    var box = document.querySelectorAll(&#x27;.box&#x27;); //选择所有.box类</span><br><span class="line">    console.log(box);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><img src="/2023/02/03/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80/01.png" style="zoom: 80%;"><h3 id="特殊元素获取"><a href="#特殊元素获取" class="headerlink" title="特殊元素获取"></a>特殊元素获取</h3><p>获取body元素</p><p><code>document.body;</code></p><h4 id="案例-开关灯"><a href="#案例-开关灯" class="headerlink" title="案例:开关灯"></a>案例:开关灯</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .close &#123;</span><br><span class="line">            background-color: black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .open &#123;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button&gt;开关灯&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var light = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">        var cge = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">        var body = document.body</span><br><span class="line">        var tag = 0;</span><br><span class="line">        light.onclick = function () &#123;</span><br><span class="line">            if (tag == 0) &#123;</span><br><span class="line">                body.className = &#x27;close&#x27;;</span><br><span class="line">                tag = 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                body.className = &#x27;open&#x27;;</span><br><span class="line">                tag = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>获取html元素</p><p><code>document.documentElement;</code></p><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>触发——响应的机制</p><p>事件由三部分组成：事件源，事件类型，事件处理程序</p><p>事件源：事件被触发的对象</p><p>事件类型：如何触发，什么事件。比如鼠标点击，还是经过</p><p>事件处理程序：通过一个函数赋值的方式完成</p><h3 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h3><ol><li>获取事件源（用户施加操作的对象）</li><li>注册事件（用户进行的操作）</li><li>添加事件处理程序（采取函数赋值的方式）（采取的反馈）</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;123&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var div = document.querySelector(&#x27;div&#x27;);  //获取事件源</span><br><span class="line">    //div.click  注册事件</span><br><span class="line">    div.click = function () &#123;  //添加事件处理程序</span><br><span class="line">        console.log(&#x27;我被选中了&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><h4 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h4><p><code>element.innerText   //从起始位置到终止位置的内容，但它去除HTML标签，同时空格和换行也会去掉</code></p><p><code>element.innerHTML  //起始位置到终止位置的全部内容，包括HTML标签，同时保留空格和换行</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;显示当前系统时间&lt;/button&gt;</span><br><span class="line">&lt;div&gt;某个时间&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var btn = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">    var div = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">    btn.onclick = function () &#123;</span><br><span class="line">        div.innerHTML = getDate();</span><br><span class="line">    &#125;</span><br><span class="line">    function getDate() &#123;</span><br><span class="line">        var date = new Date();</span><br><span class="line">        var year = date.getFullYear();</span><br><span class="line">        var month = date.getMonth() + 1;</span><br><span class="line">        var dates = date.getDate();</span><br><span class="line">        var arr = [&#x27;星期一&#x27;, &#x27;星期一&#x27;, &#x27;星期二&#x27;, &#x27;星期三&#x27;, &#x27;星期四&#x27;, &#x27;星期五&#x27;, &#x27;星期六&#x27;];</span><br><span class="line">        var day = date.getDay();</span><br><span class="line">        return &#x27;今天是&#x27; + year + &#x27;年&#x27; + month + &#x27;月&#x27; + dates + &#x27;日&#x27; + arr[day];  //今天是2023年2月1日星期三</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="常用元素属性操作"><a href="#常用元素属性操作" class="headerlink" title="常用元素属性操作"></a>常用元素属性操作</h4><p>修改元素属性，通过 <code>元素名.属性 = &#39;   &#39;;</code>来修改</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=&quot;picture1&quot;&gt;头像1&lt;/button&gt;</span><br><span class="line"> &lt;button id=&quot;picture2&quot;&gt;头像2&lt;/button&gt;</span><br><span class="line"> &lt;img src=&quot;头像1.jpg&quot;&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     var picture1 = document.querySelector(&#x27;#picture1&#x27;);</span><br><span class="line">     var picture2 = document.querySelector(&#x27;#picture2&#x27;);</span><br><span class="line">     var img = document.querySelector(&#x27;img&#x27;);</span><br><span class="line">     picture1.onclick = function () &#123;</span><br><span class="line">         img.src = &#x27;头像2.jpg&#x27;;</span><br><span class="line">         img.title = &#x27;头像2&#x27;;</span><br><span class="line">     &#125;</span><br><span class="line">     picture2.onclick = function () &#123;</span><br><span class="line">         img.src = &#x27;头像1.jpg&#x27;;</span><br><span class="line">         img.title = &#x27;头像1&#x27;;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="案例：分时问候"><a href="#案例：分时问候" class="headerlink" title="案例：分时问候"></a>案例：分时问候</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;images/上午好.png&quot;&gt;</span><br><span class="line">&lt;div&gt;上午好&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var img = document.querySelector(&#x27;img&#x27;);</span><br><span class="line">    var div = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">    var date = new Date();</span><br><span class="line">    var h = date.getHours();</span><br><span class="line">    if (h &lt; 12) &#123;</span><br><span class="line">        img.src = &#x27;images/上午好.png&#x27;;</span><br><span class="line">        div.innerHTML = &#x27;上午好&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (h &lt; 18) &#123;</span><br><span class="line">        img.src = &#x27;images/下午好.png&#x27;;</span><br><span class="line">        div.innerHTML = &#x27;下午好&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        img.src = &#x27;images/晚上好.png&#x27;;</span><br><span class="line">        div.innerHTML = &#x27;晚上好&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="表单元素属性操作"><a href="#表单元素属性操作" class="headerlink" title="表单元素属性操作"></a>表单元素属性操作</h4><p>利用DOM属性可以操作如下表单元素的属性：</p><p>type,  value,  checked,  selected,  disabled</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">   &lt;input type=&quot;text&quot; value=&quot;输入内容&quot;&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       var btn = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">       var input = document.querySelector(&#x27;input&#x27;);</span><br><span class="line">       btn.onclick = function () &#123;</span><br><span class="line">           input.value = &#x27;被点击了&#x27;;</span><br><span class="line">           //想要某个表单被禁用，不能再点击</span><br><span class="line">           btn.disabled = true;</span><br><span class="line">           //this指向的是事件函数的调用者btn</span><br><span class="line">           this.disabled = true;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="案例：京东密码显示"><a href="#案例：京东密码显示" class="headerlink" title="案例：京东密码显示"></a>案例：京东密码显示</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;images/close.png&quot; id=&quot;eye&quot;&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; id=&quot;pwd&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var eye = document.getElementById(&#x27;eye&#x27;);</span><br><span class="line">    var pwd = document.getElementById(&#x27;pwd&#x27;);</span><br><span class="line">    //绑定事件 处理程序</span><br><span class="line">    var flag = 0;</span><br><span class="line">    eye.onclick = function () &#123;</span><br><span class="line">        if (flag == 0) &#123;</span><br><span class="line">            pwd.type = &#x27;text&#x27;;</span><br><span class="line">            eye.src = &#x27;images/open.png&#x27;;</span><br><span class="line">            flag = 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            pwd.type = &#x27;password&#x27;;</span><br><span class="line">            eye.src = &#x27;images/close.png&#x27;;</span><br><span class="line">            flag = 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="样式属性操作（修改样式比较少）"><a href="#样式属性操作（修改样式比较少）" class="headerlink" title="样式属性操作（修改样式比较少）"></a>样式属性操作（修改样式比较少）</h4><p>里面的属性采取驼峰命名法。且修改style样式操作，产生的是行内样式，权重高</p><p><code>element.style   行内样式操作</code></p><p><code>element.className 类名样式操作</code></p><h4 id="使用className修改样式属性（修改样式比较多）"><a href="#使用className修改样式属性（修改样式比较多）" class="headerlink" title="使用className修改样式属性（修改样式比较多）"></a>使用className修改样式属性（修改样式比较多）</h4><p>将改变后的样式写在css里，然后在函数内使用<code>this.className = &#39;新样式类名&#39;;</code>调用</p><img src="/2023/02/03/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80/image-20230203203527473.png" style="zoom: 50%;"><ul><li>为了方式覆盖原来的类名，可以采用多类名选择器 <code>this.className = &#39;原类名 新样式类名&#39;;</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;获取元素&quot;&gt;&lt;a href=&quot;#获取元素&quot; class=&quot;headerlink&quot; title=&quot;获取元素&quot;&gt;&lt;/a&gt;获取元素&lt;/h2&gt;&lt;p&gt;如何获取页面元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据ID获取&lt;/li&gt;
&lt;li&gt;根据标签名获取&lt;/li&gt;
&lt;li&gt;通过HTML</summary>
      
    
    
    
    <category term="DOM" scheme="http://localhost:4000/categories/DOM/"/>
    
    
    <category term="DOM" scheme="http://localhost:4000/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记——内置对象</title>
    <link href="http://localhost:4000/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <id>http://localhost:4000/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-02-02T14:22:30.000Z</published>
    <updated>2023-02-02T14:26:17.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1. 内置对象"></a>1. 内置对象</h2><p>js中对象分为三种：自定义对象，内置对象，浏览器对象</p><p><strong>内置对象</strong>就是js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是基本而必要的功能（属性和方法）</p><h2 id="2-查文档"><a href="#2-查文档" class="headerlink" title="2. 查文档"></a>2. 查文档</h2><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects</a></p><h3 id="如何学习对象中的方法"><a href="#如何学习对象中的方法" class="headerlink" title="如何学习对象中的方法"></a>如何学习对象中的方法</h3><ol><li>查阅该方法的功能</li><li>查看里面参数的意义和类型</li><li>查看返回值的意义和类型</li><li>通过demo进行测试</li></ol><h2 id="3-Math对象"><a href="#3-Math对象" class="headerlink" title="3. Math对象"></a>3. Math对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Math对象<strong>不是构造函数</strong>（故不需要new来调用），它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整，最大值等）可以使用Math中的成员</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Math.PI  //圆周率</span><br><span class="line">Math.floor()  //向下取整</span><br><span class="line">Math.ceil()   //向上取整`</span><br><span class="line">Math.round()  //四舍五入`</span><br><span class="line">Math.abs  //绝对值`</span><br><span class="line">Math.max() /Math.min()  //求最大值和最小值</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.abs(-1));  // 1</span><br><span class="line">console.log(Math.abs(&#x27;-1&#x27;));  // 1  隐式转换，会转换成数字型</span><br><span class="line">console.log(Math.floor(1.1));   //1</span><br><span class="line">console.log(Math.ceil(1.9));  //2</span><br><span class="line">console.log(Math.round(1.1));  //1</span><br><span class="line">console.log(Math.round(-1.5));  //  -1  其他数字都是四舍五入，但是 . 5是特殊的，它会往大取值</span><br></pre></td></tr></table></figure><h3 id="随机数方法Random"><a href="#随机数方法Random" class="headerlink" title="随机数方法Random()"></a>随机数方法Random()</h3><ol><li><p>返回一个浮点数，范围在 [0,1)之间。这个方法括号里不加参数</p></li><li><p>想要得到包含两个数之间的随机整数： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.floor(Math.random() * (max - min + 1)) + min;</span><br></pre></td></tr></table></figure></li><li><p>随机点名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getRandom(min, max) &#123;</span><br><span class="line">            return Math.floor(Math.random() * (max - min + 1)) + min;</span><br><span class="line">        &#125;</span><br><span class="line">var arr = [&#x27;李明&#x27;,&#x27;小红&#x27;,&#x27;李磊&#x27;,&#x27;王芳&#x27;,];</span><br><span class="line">console.log(arr[getRandom(0,arr.length-1)]);</span><br></pre></td></tr></table></figure></li><li><p>案例：猜数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function getRandom(min, max) &#123;</span><br><span class="line">          return Math.floor(Math.random() * (max - min + 1)) + min;</span><br><span class="line">         &#125;</span><br><span class="line">         var random = getRandom(1, 10);</span><br><span class="line">         while (true) &#123;  //死循环</span><br><span class="line">             var num = prompt(&#x27;请输入一个数字&#x27;);</span><br><span class="line">             if (num &gt; random) &#123;</span><br><span class="line">                 alert(&#x27;您输入的数字大了&#x27;)</span><br><span class="line">             &#125; else if (num &lt; random) &#123;</span><br><span class="line">                 return alert(&#x27;您输入的数字小了&#x27;);</span><br><span class="line">             &#125; else &#123;</span><br><span class="line">                 return alert(&#x27;猜对了&#x27;);</span><br><span class="line">                 break;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-Date日期对象"><a href="#4-Date日期对象" class="headerlink" title="4. Date日期对象"></a>4. Date日期对象</h2><p>日期对象是一个<strong>构造函数</strong>，必须用new来创建（调用）</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date(参数);</span><br><span class="line">console.log(date);</span><br></pre></td></tr></table></figure><p>如果没有参数，则返回当前系统的当前时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 对象名 = new Date();</span><br></pre></td></tr></table></figure><p>参数常用的写法 <strong>数字型</strong>为 2008, 08, 08 或<strong>字符串型</strong> ‘2008-8-8 8:0:0’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br></pre></td></tr></table></figure><h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><p><strong>年月日星期</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line">console.log(date.getFullYear());//返回当前日期的年份</span><br><span class="line">console.log(date.getMonth() + 1);//返回当前月份，但是是0~11,记得月份+1</span><br><span class="line">console.log(date.getDate()); //返回的是几号</span><br><span class="line">console.log(date.getDay);//返回的是星期几，周一返回的是1，周六返回的是6，周日返回的是0</span><br><span class="line">// 为了实现汉字输出日期，包括星期几，利用数组来实现</span><br><span class="line">var year = date.getFullYear();</span><br><span class="line">var month = date.getMonth() + 1;</span><br><span class="line">var dates = date.getDate();</span><br><span class="line">var arr = [&#x27;星期一&#x27;, &#x27;星期一&#x27;, &#x27;星期二&#x27;, &#x27;星期三&#x27;, &#x27;星期四&#x27;, &#x27;星期五&#x27;, &#x27;星期六&#x27;];</span><br><span class="line">var day = date.getDay();</span><br><span class="line">console.log(&#x27;今天是&#x27; + year + &#x27;年&#x27; + month + &#x27;月&#x27; + dates + &#x27;日&#x27; + arr[day]);  //今天是2023年2月1日星期三</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>为了实现汉字输出星期几，需要借助数组来实现，同时应注意，date.getDate();获取星期是按照 星期日~星期六 的顺序来进行的。</li><li>月份是从0开始的，应当+1</li></ul><p><strong>时分秒</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line">console.log(date.getHours());</span><br><span class="line">console.log(date.getMinutes());</span><br><span class="line">console.log(date.getSeconds());</span><br></pre></td></tr></table></figure><p>实例：封装函数显示时分秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function getTime() &#123;</span><br><span class="line">         var time = new date();  //调用Date构造函数</span><br><span class="line">         var hour = time.getHours(); //对象名.方法名(); 进行调用</span><br><span class="line">         hours &lt; 10 ? &#x27;0&#x27; + hour : hour;  //小于10在前面加上0</span><br><span class="line">         var minutes = time.getMinutes();</span><br><span class="line">         minutes &lt; 10 ? &#x27;0&#x27; + minutes : minutes;</span><br><span class="line">         var seconds = time.getSeconds();</span><br><span class="line">         seconds &lt; 10 ? &#x27;0&#x27; + seconds : seconds;</span><br><span class="line">         return hour + &#x27;:&#x27; + minutes + &#x27;:&#x27; + seconds;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><strong>总的毫秒形式（时间戳）</strong></p><p>获得距离1970年1月1号过了多少毫秒 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line"> console.log(date.valueOf());</span><br><span class="line">简单写法：</span><br><span class="line">var date = +new Date();</span><br><span class="line">H5新增毫秒数：</span><br><span class="line">console.log(Date.now());</span><br></pre></td></tr></table></figure><h3 id="案例：倒计时"><a href="#案例：倒计时" class="headerlink" title="案例：倒计时"></a>案例：倒计时</h3><p>转换公式：</p><p>   d &#x3D; parseInt(总秒数&#x2F;60&#x2F;60&#x2F;24) 计算天数</p><p>   h &#x3D; parshInt(总秒数&#x2F;60&#x2F;60%24) 计算小时</p><p>   m &#x3D; parseInt(总秒数&#x2F;60%60)   计算分钟</p><p>   s &#x3D; parseInt(总秒数%60)    计算秒数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function countDown(time) &#123;</span><br><span class="line">          var nowTime = +new Date();  //返回当前时间总的毫秒数</span><br><span class="line">          var inputTime = +new Date(time); //返回的是用户输入事件总的毫秒数</span><br><span class="line">          var times = (inputTime - nowTime) / 1000; //剩余时间总的秒数 1秒=1000毫秒</span><br><span class="line">          var d = parseInt(times / 60 / 60 / 24);</span><br><span class="line">          d = d &lt; 10 ? &#x27;0&#x27; + d : d;</span><br><span class="line">          var h = parseInt(times / 60 / 60 % 24);</span><br><span class="line">          h = h &lt; 10 ? &#x27;0&#x27; + h : h;</span><br><span class="line">          var m = parseInt(times / 60 % 60);</span><br><span class="line">          m = m &lt; 10 ? &#x27;0&#x27; + m : m;</span><br><span class="line">          var s = parseInt(times % 60);</span><br><span class="line">          s = s &lt; 10 ? &#x27;0&#x27; + s : s;</span><br><span class="line">          return d + &#x27;天&#x27; + h + &#x27;时&#x27; + m + &#x27;分&#x27; + s + &#x27;秒&#x27;;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      console.log(countDown(&#x27;2023-3-20 10:39:00&#x27;));</span><br></pre></td></tr></table></figure><h2 id="5-数组对象"><a href="#5-数组对象" class="headerlink" title="5.数组对象"></a>5.数组对象</h2><h3 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h3><ol><li>instanceof 运算符它可以用来检测是否为数组</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">console.log(arr instanceof Array);  //true</span><br></pre></td></tr></table></figure><ol start="2"><li>Array.isArray(参数)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">console.log(Array.isArray(arr));  //true</span><br></pre></td></tr></table></figure><h3 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h3><img src="/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/image-20230202110148567.png" style="zoom: 50%;"><p>push方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4];</span><br><span class="line">        arr.push(6, &#x27;abc&#x27;); //</span><br><span class="line">        console.log(arr);</span><br></pre></td></tr></table></figure><ul><li>push()里面直接写添加的元素就可以</li><li>原数组也会发生变化</li></ul><p>unshift方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4];</span><br><span class="line">        arr.unshift(10, &#x27;sss&#x27;); //</span><br><span class="line">        console.log(arr);</span><br></pre></td></tr></table></figure><ul><li>原数组也会发生变化</li></ul><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p>翻转数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名.reverse();</span><br></pre></td></tr></table></figure><p>冒泡排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组名.sort(function(a,b)&#123;</span><br><span class="line">   return a - b; //按照升序排列</span><br><span class="line">   return b - a; //按照降序排列</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><img src="/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/image-20230202114228052.png" style="zoom:50%;"><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(&#x27;john&#x27;, &#x27;blue&#x27;, &#x27;amy&#x27;, 1, 5, 9);</span><br><span class="line">        console.log(arr.indexOf(&#x27;amy&#x27;));   // 2   indexOf(数组元素)</span><br></pre></td></tr></table></figure><h3 id="案例：数组去重"><a href="#案例：数组去重" class="headerlink" title="案例：数组去重"></a>案例：数组去重</h3><ol><li>目标：把旧数组里面的元素取出来放到新数组，重复的元素只保留一个，放到新数组中去重</li><li>核心算法：遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面出现过，我们就添加，否则不添加。</li><li>如何知道元素是否存在？利用新数组.indexof()</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function unique(arr) &#123;</span><br><span class="line">       var newArr = [];</span><br><span class="line">       for (var i = 0; i &lt; newArr.length; i++) &#123;</span><br><span class="line">           if (newArr.indexOf(arr[i]) == -1) &#123;</span><br><span class="line">               newArr.push(arr[i]);</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">var demo = unique([&#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;c&#x27;, &#x27;b&#x27;]);</span><br></pre></td></tr></table></figure><h3 id="数组转换成字符串"><a href="#数组转换成字符串" class="headerlink" title="数组转换成字符串"></a>数组转换成字符串</h3><img src="/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/image-20230202124536249.png" style="zoom:50%;"><h2 id="6-字符串对象"><a href="#6-字符串对象" class="headerlink" title="6.字符串对象"></a>6.字符串对象</h2><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><p><strong>基本包装类型</strong>：就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。包括数字型，字符串型，布尔型三种包装方法。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str  =&#x27;andy&#x27;;</span><br><span class="line">console.log(str.length);   //注意：这里的str是变量名</span><br></pre></td></tr></table></figure><p>问题：为什么字符串类型’andy’具有长度？</p><p>操作：</p><ol><li>把简单数据类型包装成复杂数据类型 var temp &#x3D; new String(‘andy’);</li><li>把临时变量的值给str  str &#x3D; temp;</li><li>销毁这个变量 temp &#x3D; null;</li></ol><h3 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h3><p>字符串的不可变指的是里面的值不可变，虽然看上去可以改变内容，但是其实是地址变了，内存中新开辟了一个内存空间。</p><img src="/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/image-20230202152358182.png" style="zoom:50%;"><h3 id="根据字符串返回位置"><a href="#根据字符串返回位置" class="headerlink" title="根据字符串返回位置"></a>根据字符串返回位置</h3><p>字符串所有的方法都不会修改字符串本身，操作完成会返回一个新的字符串</p><img src="/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/image-20230202152943253.png" style="zoom:50%;"><p>案例：查找字符串相同元素并返回位置和个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;abcoefoxyozzopp&#x27;;</span><br><span class="line">var index = str.indexOf(&#x27;o&#x27;);</span><br><span class="line">var num = 0;</span><br><span class="line">while (index != -1) &#123;</span><br><span class="line">     console.log(index);</span><br><span class="line">     num++;</span><br><span class="line">     index = str.indexOf(&#x27;o&#x27;, index + 1);</span><br><span class="line">&#125;</span><br><span class="line">console.log(num);</span><br></pre></td></tr></table></figure><h3 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h3><img src="/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/image-20230202164151457.png" style="zoom:50%;"><ul><li>charCodeAt(index)返回相应的索引号字符ASCⅡ值，目的是判断用户按下了哪个键</li></ul><p>技巧：</p><p>有一个对象，判断是否有该属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    age:18&#125;</span><br><span class="line">if(obj[&#x27;age&#x27;])&#123;</span><br><span class="line">   console.log(&#x27;有该属性&#x27;);&#125;</span><br></pre></td></tr></table></figure><h3 id="实例：统计出现次数最多的字符"><a href="#实例：统计出现次数最多的字符" class="headerlink" title="实例：统计出现次数最多的字符"></a>实例：统计出现次数最多的字符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;abcoefoxyozzopp&#x27;;</span><br><span class="line">      var o = &#123;&#125;;  //定义一个o对象</span><br><span class="line">      for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">          var chars = str.charAt(i);  //chars是字符串的每一个字符</span><br><span class="line">          if (o[chars]) &#123;   //o[chars]得到的是属性值 如果用o.chars，表示 o对象里&quot;chars&quot;属性的值.但是，如果用                                       o[chars]，就是o对象里str.charAT(i)属性的值</span><br><span class="line">              o[chars]++;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              o[chars] = 1; //str.charAt(i):1</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">       //遍历对象</span><br><span class="line">      var max = 0;</span><br><span class="line">      var ch = &#x27;&#x27;;</span><br><span class="line">      for (var k in o) &#123;</span><br><span class="line">          if (o[k] &gt; max) &#123;  //这里返回k的属性值，即字符重复出现的次数</span><br><span class="line">              max = o[k];</span><br><span class="line">              ch = k; //用空字符串ch，来存储属性k,即重复次数最多的那个属性（字符）</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(max);</span><br><span class="line">      console.log(&#x27;最多的字符是&#x27; + ch);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>当对象的原型链中的原型对象上有没有对应的属性名，那么直接在当前对象上添加这个属性(如果没有这个属性)并赋值。</li></ul><h3 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h3><img src="/2023/02/02/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/image-20230202204758938.png" style="zoom:50%;"><p>其他方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace(&#x27;被替换的字符&#x27;,&#x27;替换为的字符&#x27;); </span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>相同字符只会替换第一个</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split(&#x27;分隔符&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-内置对象&quot;&gt;&lt;a href=&quot;#1-内置对象&quot; class=&quot;headerlink&quot; title=&quot;1. 内置对象&quot;&gt;&lt;/a&gt;1. 内置对象&lt;/h2&gt;&lt;p&gt;js中对象分为三种：自定义对象，内置对象，浏览器对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内置对象&lt;/stro</summary>
      
    
    
    
    <category term="JavaScript学习笔记" scheme="http://localhost:4000/categories/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="内置对象" scheme="http://localhost:4000/tags/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>错误记录——函数的调用与构造函数调用的区别</title>
    <link href="http://localhost:4000/2023/02/01/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://localhost:4000/2023/02/01/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2023-02-01T08:08:56.000Z</published>
    <updated>2023-02-02T02:38:46.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误记录——函数的调用与构造函数的区别"><a href="#错误记录——函数的调用与构造函数的区别" class="headerlink" title="错误记录——函数的调用与构造函数的区别"></a>错误记录——函数的调用与构造函数的区别</h1><p>在完成计算机作业的时候，发现浏览器弹出 [object,object]，并不能得到正确的结果，经过检查发现是函数的调用写错</p><img src="/2023/02/01/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/image-20230201155103711.png" style="zoom:80%;"><p>在调用函数时发现了多写了一个 new，删除之后代码顺利执行，发现是由于自己将函数与构造函数弄混了导致的。</p><p>函数与构造函数的区别：</p><ul><li>函数在调用时，使用 <code>函数名(形参);</code> 构造函数在调用时，使用 <code>new 构造函数名(形参);</code></li><li>构造函数不使用return关键字，而函数使用return</li><li>构造函数名首字母需要大写，以用来和普通函数进行区分</li></ul><p>函数与构造函数的相同点：</p><ul><li>外层语法都是<code>function 函数名/构造函数名()&#123;   &#125;</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;错误记录——函数的调用与构造函数的区别&quot;&gt;&lt;a href=&quot;#错误记录——函数的调用与构造函数的区别&quot; class=&quot;headerlink&quot; title=&quot;错误记录——函数的调用与构造函数的区别&quot;&gt;&lt;/a&gt;错误记录——函数的调用与构造函数的区别&lt;/h1&gt;&lt;p&gt;在完</summary>
      
    
    
    
    <category term="JavaScript学习笔记" scheme="http://localhost:4000/categories/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记——作用域与预解析</title>
    <link href="http://localhost:4000/2023/02/01/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://localhost:4000/2023/02/01/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%A2%84%E8%A7%A3%E6%9E%90/</id>
    <published>2023-01-31T16:01:50.000Z</published>
    <updated>2023-02-01T02:34:26.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS作用域"><a href="#JS作用域" class="headerlink" title="JS作用域"></a>JS作用域</h1><h2 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1. 作用域"></a>1. 作用域</h2><p>就是代码名字（变量）在某个范围内起作用，目的是为了提高程序的可靠性，更重要的是减少命名冲突</p><p>js作用域（es6）之前：全局作用域和局部作用域</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p><strong>整个script标签</strong> 或者 是一个单独的js文件</p><h3 id="局部作用域（函数作用域）"><a href="#局部作用域（函数作用域）" class="headerlink" title="局部作用域（函数作用域）"></a>局部作用域（函数作用域）</h3><p><strong>在函数内部</strong>就是局部作用域 这个代码的名字只在函数内部起效果</p><h2 id="2-变量的作用域"><a href="#2-变量的作用域" class="headerlink" title="2. 变量的作用域"></a>2. 变量的作用域</h2><p>根据作用域的不同，分别全局变量和局部变量</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在全局作用域下的变量</p><p>注意：</p><ul><li>如果在函数内部没有声明直接赋值的变量也属于全局变量</li></ul><p>示例：</p><p>  <code>function fun()&#123;</code></p><p>​      <code>var num1 = 10;</code></p><p>​      <code>num2 = 20;  //函数内部没有声明直接赋值的变量</code></p><p>​    <code>&#125;</code></p><p>​    <code>fun();</code></p><p>​    <code>console.log(num1);  //运行错误，因为num1是一个局部变量，无法全局调用</code></p><p>​    <code>console.log(num2);  //20 运行成功，因为num2在函数内部没有声明，按全局变量处理</code></p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>在局部作用域下声明的变量叫做局部变量</p><p>注意：</p><ul><li><p>局部变量只能在该函数内部使用</p></li><li><p>函数内部var声明的变量是局部变量</p></li><li><p>函数的形参实际上就是局部变量</p></li></ul><h3 id="从执行效率来看全局变量和局部变量"><a href="#从执行效率来看全局变量和局部变量" class="headerlink" title="从执行效率来看全局变量和局部变量"></a>从执行效率来看全局变量和局部变量</h3><ul><li>全局变量只有浏览器关闭的时候才会销毁，比较占内存空间</li><li>局部变量当我们执行完毕就会销毁，比较节约资源</li></ul><h2 id="3-作用域链"><a href="#3-作用域链" class="headerlink" title="3. 作用域链"></a>3. 作用域链</h2><p>内部函数访问外部函数的变量，采取的是链式查找的方式来决定取哪个值，这种结构我们称为作用域链</p><p>就近原则</p><img src="/2023/02/01/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%A2%84%E8%A7%A3%E6%9E%90/image-20230131165921665.png" style="zoom:80%;"><p>num输出值为20，一层一层向上找</p><ul><li><p>只要是代码，就只要有一个作用域</p></li><li><p>写在函数内部的局部作用域</p></li><li><p>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</p><img src="/2023/02/01/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%A2%84%E8%A7%A3%E6%9E%90/image-20230131165250172.png" style="zoom:80%;"></li><li><p>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作用域链</p></li></ul><h1 id="JS预解析"><a href="#JS预解析" class="headerlink" title="JS预解析"></a>JS预解析</h1><h2 id="1-预解析"><a href="#1-预解析" class="headerlink" title="1.预解析"></a>1.预解析</h2><p>js代码是通过浏览器中的js解析器来执行的，js引擎运行js分为两步：预解析 代码执行</p><p><strong>预解析</strong>：js引擎会把js所有var 还有function提升到当前作用于的最前面</p><p><strong>代码执行</strong>：按照代码书写的顺序从上往下执行</p><p>预解析分为：</p><h3 id="变量预解析（变量提升）"><a href="#变量预解析（变量提升）" class="headerlink" title="变量预解析（变量提升）"></a>变量预解析（变量提升）</h3><p>​       就是把所有的变量声明提升到<strong>当前作用域</strong>的最前面，不提升 赋值操作</p><img src="/2023/02/01/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%A2%84%E8%A7%A3%E6%9E%90/image-20230131201508526.png" style="zoom:80%;"><h3 id="函数预解析（函数提升）"><a href="#函数预解析（函数提升）" class="headerlink" title="函数预解析（函数提升）"></a>函数预解析（函数提升）</h3><p>​       就是把所有的函数声明提升到当前作用域的最前面</p><p>案例：</p><p>  <code>var num = 10;</code></p><p>​    <code>fun();</code></p><p>​    <code>function fun() &#123;</code></p><p>​      <code>console.log(num);</code></p><p>​      <code>var num = 20;</code></p><p>​    <code>&#125;</code></p><p>​    <code>//相当于执行如下操作：</code></p><p>​    <code>var num;</code></p><p>​    <code>function fun() &#123;</code></p><p>​      <code>var num;</code></p><p>​      <code>console.log(num);  //就近原则，num=undefined</code></p><p>​      <code>num = 20;</code></p><p>​    <code>&#125;</code></p><p>​    <code>num = 10;</code></p><p>​    <code>fun();</code></p><img src="/2023/02/01/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%A2%84%E8%A7%A3%E6%9E%90/image-20230131204651732.png" style="zoom:80%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS作用域&quot;&gt;&lt;a href=&quot;#JS作用域&quot; class=&quot;headerlink&quot; title=&quot;JS作用域&quot;&gt;&lt;/a&gt;JS作用域&lt;/h1&gt;&lt;h2 id=&quot;1-作用域&quot;&gt;&lt;a href=&quot;#1-作用域&quot; class=&quot;headerlink&quot; title=&quot;1. </summary>
      
    
    
    
    <category term="JavaScript学习笔记" scheme="http://localhost:4000/categories/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="http://localhost:4000/tags/JavaScript/"/>
    
    <category term="作用域与预解析" scheme="http://localhost:4000/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记——对象</title>
    <link href="http://localhost:4000/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/"/>
    <id>http://localhost:4000/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-01-31T15:56:46.000Z</published>
    <updated>2023-02-01T08:21:26.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="1-什么是对象"><a href="#1-什么是对象" class="headerlink" title="1. 什么是对象"></a>1. 什么是对象</h2><p>对象：对象是一个具体的事物。在js中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串，数值，数组，函数等。</p><p>对象由属性和方法组成</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用名词）</li></ul><h2 id="2-创建对象的方式"><a href="#2-创建对象的方式" class="headerlink" title="2. 创建对象的方式"></a>2. 创建对象的方式</h2><p>三种方法：</p><ul><li>利用字面量创建对象</li><li>利用new object创建对象</li><li>利用构造函数创建对象</li></ul><h3 id="2-1-利用字面量创建对象"><a href="#2-1-利用字面量创建对象" class="headerlink" title="2.1 利用字面量创建对象"></a>2.1 利用字面量创建对象</h3><p><code>var 对象名 = &#123;</code></p><p><code>属性1 : 属性值1,</code></p><p><code>属性2 : 属性值2,</code></p><p><code>方法名 : 匿名函数function()&#123;</code></p><p><code>&#125;</code></p><p><code>...</code></p><p><code>&#125;;</code></p><p>注意：</p><ul><li>里面的属性或者方法采取键值对的方法 键-属性名： 值-属性值</li><li>多个属性或者方法中间用逗号隔开</li><li>方法冒号后面跟的是一个匿名函数</li></ul><h4 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h4><p>调用对象的属性：</p><p><code>对象名.属性名    // 例如：obj.uname</code></p><p><code>对象名[&#39;属性名&#39;]      //例如：obj[&#39;uname&#39;]</code></p><ul><li>两种方法都很重要</li></ul><p>调用对象的方法：</p><p><code>对象名.方法名()</code></p><ul><li>方法后面不要忘记加括号</li></ul><h4 id="变量、属性、函数、方法的区别"><a href="#变量、属性、函数、方法的区别" class="headerlink" title="变量、属性、函数、方法的区别"></a>变量、属性、函数、方法的区别</h4><p><strong>变量和属性</strong></p><p>变量和属性都是用来存储数据的</p><p>变量单独声明并赋值，使用的时候直接写变量名，单独存在</p><p>属性在对象里，不需要声明，使用的时候必须是 对象.属性</p><p><strong>函数和方法</strong></p><p>函数和方法都是实现某种功能的</p><p>函数是单独声明 并且调用的</p><p>方法在对象里，调用的时候是 对象.方法()</p><h3 id="2-2-利用new-Object创建对象"><a href="#2-2-利用new-Object创建对象" class="headerlink" title="2.2 利用new Object创建对象"></a>2.2 利用new Object创建对象</h3><p><code>var 对象名 = new Object();</code></p><p>​       <code>对象名.属性 = 属性值;</code></p><p>​       <code>对象名.方法 = function()&#123;</code></p><p><code>&#125;</code></p><ul><li>我们是利用等号赋值的方法，添加对象的属性和方法</li><li>每个属性和方法之间用分号结束</li></ul><h3 id="2-3-利用构造函数创建对象"><a href="#2-3-利用构造函数创建对象" class="headerlink" title="2.3 利用构造函数创建对象"></a>2.3 利用构造函数创建对象</h3><p>问题：</p><p>因为前两种创建对象的方式，一次只能创建一个对象</p><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/image-20230201114724661.png" style="zoom:80%;"><p>属性相同，只是属性值和对象名不一样，太麻烦了，于是将其封装成一个函数。</p><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与new运算符一起使用。我们可以把对象中的一些公共属性和方法抽取出来，然后封装到这个函数里面</p><p><code>function 构造函数名()&#123;</code></p><p>​    <code>this.属性 = 属性值;</code></p><p>​    <code>this.方法 = function()&#123;</code></p><p>​    <code>&#125;</code></p><p><code>&#125;</code></p><p><code>new 构造函数名();  //调用</code></p><p>输入数据：<code>var 对象名 = 构造函数名(实参);</code></p><p>输出数据：<code>console.log(对象名.属性）；</code></p><p>示例：</p><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/image-20230131224659890.png" style="zoom:80%;"><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/image-20230131235148800.png" style="zoom:80%;"><p>结果：</p><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/image-20230131230446520.png" style="zoom:80%;"><p>注意：</p><ul><li><p>构造函数不需要return就可以返回结果</p></li><li><p><strong>构造函数名 首字母要大写</strong></p></li><li><p>调用构造函数 必须使用new</p></li><li><p>只要new Star() 调用函数就创建了一个对象 </p></li><li><p>属性和方法的前面必须添加this</p></li><li><p>构造函数法实际上是将属性名以及对应的参数名装入了一个函数内，外部传入参数调用这个函数，通过获取属性得到相应的属性值</p></li></ul><h4 id="构造函数和对象的区别"><a href="#构造函数和对象的区别" class="headerlink" title="构造函数和对象的区别"></a>构造函数和对象的区别</h4><p>构造函数是泛指的某一大类</p><p>对象特指某一个具体的事物</p><p>利用构造函数创建对象的过程也称为对象的实例化</p><h4 id="new关键字执行过程"><a href="#new关键字执行过程" class="headerlink" title="new关键字执行过程"></a>new关键字执行过程</h4><ol><li>new构造函数可以在内存中创建一个空的对象</li><li>this就会指向刚才创建的空对象</li><li>执行构造函数里面的代码，给这个空对象添加属性和方法</li><li>返回这个对象</li></ol><h2 id="3-遍历对象"><a href="#3-遍历对象" class="headerlink" title="3.遍历对象"></a>3.遍历对象</h2><p>问题提出：</p><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/image-20230201113836791.png" style="zoom: 80%;"><p>解决：</p><p>for…in 语句，用于对数组或者对象的属性逐个遍历</p><p><code>for ( 定义一个变量 in 对象）&#123;</code></p><p><code>&#125;</code></p><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/image-20230201114131819.png" style="zoom:80%;"><h3 id="2-4-对象创建方法总结"><a href="#2-4-对象创建方法总结" class="headerlink" title="2.4 对象创建方法总结"></a>2.4 对象创建方法总结</h3><p><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h1&gt;&lt;h2 id=&quot;1-什么是对象&quot;&gt;&lt;a href=&quot;#1-什么是对象&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是对象&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="JavaScript学习笔记" scheme="http://localhost:4000/categories/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="http://localhost:4000/tags/JavaScript/"/>
    
    <category term="对象" scheme="http://localhost:4000/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记——函数</title>
    <link href="http://localhost:4000/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/"/>
    <id>http://localhost:4000/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/</id>
    <published>2023-01-31T06:48:58.000Z</published>
    <updated>2023-02-01T02:34:53.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="1-函数的概念"><a href="#1-函数的概念" class="headerlink" title="1. 函数的概念"></a>1. 函数的概念</h2><p>函数：封装了一段可以被重复执行的代码块，目的是让代码可以重复使用</p><h2 id="2-函数的使用"><a href="#2-函数的使用" class="headerlink" title="2. 函数的使用"></a>2. 函数的使用</h2><p>先声明，后调用</p><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><p><code>function 函数名()&#123;</code></p><p><code>函数体</code></p><p><code>&#125;</code></p><p>注意：</p><ul><li>function是声明函数的关键字</li><li>函数是做某件事情，函数名一般是动词</li><li>函数不调用，自己不执行</li></ul><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p><code>函数名();</code></p><p>注意：</p><ul><li>调用函数的时候不要忘记加小括号</li></ul><h3 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h3><p>把一个或多个功能通过函数的方式封装起来</p><h2 id="3-函数的参数"><a href="#3-函数的参数" class="headerlink" title="3. 函数的参数"></a>3. 函数的参数</h2><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><p><code>function 函数名(形参1，形参2...)&#123;</code></p><p><code>函数体</code></p><p><code>&#125;</code></p><p><code>函数名(实参1，实参2...);</code></p><ul><li>声明函数的括号里是形参（形式上的参数）</li><li>调用函数的括号里是实参（实际的参数）</li></ul><h3 id="形参与实参的执行过程"><a href="#形参与实参的执行过程" class="headerlink" title="形参与实参的执行过程"></a>形参与实参的执行过程</h3><p>形参是接受实参的，形参类似于变量，只不过不需要声明，由实参在调用时给它赋值</p><p>函数的参数可以有可以有也可以没有，个数不限</p><h3 id="形参于实参的个数不匹配问题"><a href="#形参于实参的个数不匹配问题" class="headerlink" title="形参于实参的个数不匹配问题"></a>形参于实参的个数不匹配问题</h3><p>如果实参的个数与形参的个数一致，则正常输出结果</p><p>如果实参的个数多于形参的个数，则实参与形参按顺序匹配</p><p>如果实参的个数少于形参的个数，则多出来的形参可以看作不用声明的变量，结果就是undefined</p><p><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/01.png"></p><h2 id="4-函数的返回值return"><a href="#4-函数的返回值return" class="headerlink" title="4. 函数的返回值return"></a>4. 函数的返回值return</h2><p>函数不应该有输出语句，而应该把结果返回给调用者</p><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p><code>function 函数名() &#123;</code></p><p>​      <code>return 需要返回的结果；</code></p><p><code>&#125;</code></p><p><code>函数名();</code></p><p>注意：</p><ul><li>函数只是实现某些功能，最终的结果需要返回给函数的调用者 函数名()</li><li>只要函数遇到return，就把后面的结果返回给函数的调用者，函数名() &#x3D; return后面的结果</li></ul><p>示例：</p><p>​    <code>function getResult() &#123;</code></p><p>​      <code>return 666;</code></p><p>​    <code>&#125;</code></p><p>​    <code>getResult();</code></p><p>​    <code>console.log(getResult());</code></p><p>技巧：</p><p><code>function getMax(arr) &#123;//接受一个数组</code></p><p>​      <code>var max = arr[0];</code></p><p>​      <code>for (var i = 1; i &lt; arr.length; i++) &#123;</code></p><p>​        <code>if (max &lt; arr[i]) &#123;</code></p><p>​          <code>max = arr[i];</code></p><p>​        <code>&#125;</code></p><p>​      <code>&#125;</code></p><p>​      <code>return max;</code></p><p>​    <code>&#125;</code></p><p>​    <code>//在实际开发里面，经常用一个变量来接受函数的返回结果</code></p><p>​    <code>var re = getMax([5, 2, 99, 101, 67, 77]);</code></p><p>​    <code>console.log(re);</code></p><h3 id="return终止函数"><a href="#return终止函数" class="headerlink" title="return终止函数"></a>return终止函数</h3><ul><li><p>return之后的代码不再执行，所以return一般放在函数的最后</p></li><li><p>return一次只能返回一个值</p></li></ul><h3 id="函数没有return返回undefine"><a href="#函数没有return返回undefine" class="headerlink" title="函数没有return返回undefine"></a>函数没有return返回undefine</h3><p>函数如果有return，则返回后面的值，如果没有，则返回undefined</p><h3 id="break-continue-return的区别"><a href="#break-continue-return的区别" class="headerlink" title="break,continue,return的区别"></a>break,continue,return的区别</h3><p><img src="/2023/01/31/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/02.png"></p><h2 id="5-arguement的使用"><a href="#5-arguement的使用" class="headerlink" title="5. arguement的使用"></a>5. arguement的使用</h2><p>当我们不确定有多少个参数传递的时候，可以通过arguement来获取。在js中，arguement实际上是当前函数的一个内置对象，所有函数都内置了一个arguement对象，arguement对象中存储了传递的所有实参</p><p>示例：</p><p> <code>function fn() &#123;</code></p><p>​      <code>console.log(arguement); //里面存储了所有传递过来的实参</code></p><p>​       <code>console.log(arguement.length);   //具有length属性</code></p><p>​    <code>&#125;</code></p><p>​    <code>fn(1,2,3)</code>;</p><p>arguement展示形式是一个伪数组，因此可以进行遍历，具有如下特点：</p><ul><li>具有length属性</li><li>按索引方式存储数据</li><li>不具有数组的push,pop等方法</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;1-函数的概念&quot;&gt;&lt;a href=&quot;#1-函数的概念&quot; class=&quot;headerlink&quot; title=&quot;1. 函数的概念&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="JavaScript学习笔记" scheme="http://localhost:4000/categories/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="http://localhost:4000/tags/JavaScript/"/>
    
    <category term="函数" scheme="http://localhost:4000/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记——数组</title>
    <link href="http://localhost:4000/2023/01/29/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/"/>
    <id>http://localhost:4000/2023/01/29/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/</id>
    <published>2023-01-29T07:16:51.000Z</published>
    <updated>2023-02-01T02:34:40.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-数组的概念"><a href="#1-数组的概念" class="headerlink" title="1.数组的概念"></a>1.数组的概念</h2><p>一组数据的集合，可以存储在单个变量下</p><h2 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2.创建数组"></a>2.创建数组</h2><p>方法：</p><ol><li><p>利用new创建数组</p><p><code>var arr = new Array();</code></p></li><li><p>利用数组字面量创建数组</p></li></ol><p>​        <code>//1.使用数组字面量方式创建空的数组</code></p><p>​            <code>var 数组名 = [];</code></p><p>​        <code>//2.使用数组字面量方式创建带初始值的数组</code></p><p>​            <code>var 数组名 =[&#39;小白&#39;,&#39;小黑&#39;,&#39;大黄&#39;,&#39;瑞奇&#39;];</code></p><ul><li>数组里面的数据一定要用逗号分隔</li><li>数组里面的数据称为数组元素</li><li>字面量是使用最多的方式</li><li>数组中的数据可以存放<strong>任意类型</strong>，数字型，字符型，布尔型，运算，函数等。</li></ul><h2 id="3-获取数组元素"><a href="#3-获取数组元素" class="headerlink" title="3.获取数组元素"></a>3.获取数组元素</h2><p>数组的索引：</p><p>用来访问数组元素的序号（数组下标从0开始）</p><p>元素获取：</p><p><code>//定义数组</code></p><p><code>var arrStus = [1,2,3];</code></p><p><code>//获取数组中的第二个元素</code></p><p><code>alert(arrStus[1]);</code></p><p><img src="/2023/01/29/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/01.png"></p><h2 id="4-遍历数组"><a href="#4-遍历数组" class="headerlink" title="4.遍历数组"></a>4.遍历数组</h2><p>如何把数组中全部元素取出来？</p><p>数组名[索引]的方法不够简便</p><p><strong>遍历：</strong>就是把数组中的每个元素从头到尾访问一次</p><p>示例：</p><p>  <code>var arr = [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;];</code></p><p>​    <code>for (var i = 0; i &lt; 3; i++) &#123;</code></p><p>​      <code>console.log(arr[i]);</code></p><p>​    <code>&#125;</code></p><p><strong>数组长度</strong></p><p>数组名.length</p><p>注意：</p><ul><li><strong>数组长度是元素的个数</strong></li></ul><h3 id="计算数组的和及平均值"><a href="#计算数组的和及平均值" class="headerlink" title="计算数组的和及平均值"></a>计算数组的和及平均值</h3><p><img src="/2023/01/29/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/02.png"></p><h2 id="5-数组中新增元素"><a href="#5-数组中新增元素" class="headerlink" title="5.数组中新增元素"></a>5.数组中新增元素</h2><p>可以通过修改length长度及索引号增加数组元素</p><h3 id="修改length长度"><a href="#修改length长度" class="headerlink" title="修改length长度"></a>修改length长度</h3><p>可以通过修改length属性达到扩容的目的</p><p>示例：</p><p><code>var arr = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;pink&#39;];</code></p><p>​    <code>console.log(arr.length);</code></p><p>​    <code>arr.length = 5;  //把数组的长度修改为5，里面应该有五个元素</code></p><p>​    <code>console.log(arr[5]); //undefined</code></p><h3 id="修改数组索引新增数组元素"><a href="#修改数组索引新增数组元素" class="headerlink" title="修改数组索引新增数组元素"></a>修改数组索引新增数组元素</h3><p>​    <code>//修改索引号</code></p><p>​    <code>var arr1 = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;pink&#39;];</code></p><p>​    <code>arr1[4] = &#39;orange&#39;;  //追加数组元素</code></p><p>​    <code>console.log(arr1);</code> </p><p>​    <code>arr1[1] = &#39;black&#39;;  //替换数组元素</code></p><p>​    <code>console.log(arr1);</code>  </p><p>​    <code>arr1 = &#39;white&#39;;  //不要给数组名赋值，否则里面的数组元素会被覆盖</code></p><p>​    <code>console.log(arr1)</code> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h2 id=&quot;1-数组的概念&quot;&gt;&lt;a href=&quot;#1-数组的概念&quot; class=&quot;headerlink&quot; title=&quot;1.数组的概念&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="JavaScript学习笔记" scheme="http://localhost:4000/categories/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="http://localhost:4000/tags/JavaScript/"/>
    
    <category term="数组" scheme="http://localhost:4000/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
